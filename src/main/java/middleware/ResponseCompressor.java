package middleware;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.zip.GZIPOutputStream;

import request.HttpRequest;
import response.HttpResponse;

public class ResponseCompressor {

    private final List<String> supportedEncodings = Collections.singletonList("gzip");

    /**
     * Processes the given HttpResponse, applying GZIP compression if supported by the client.
     * Modifies the response in place by setting Content-Encoding and compressing the body.
     * Also sets the Content-Length header based on the final (possibly compressed) body.
     *
     * @param request  The incoming HttpRequest containing Accept-Encoding.
     * @param response The HttpResponse generated by the handler.
     * @return The modified HttpResponse (or original if no compression applied/failed).
     */
    public HttpResponse compress(HttpRequest request, HttpResponse response) {
        byte[] originalBody = response.getBody();
        byte[] finalBody = originalBody;

        Optional<String> acceptEncodingHeader = request.getHeader("Accept-Encoding");

        if (originalBody.length > 0 && acceptEncodingHeader.isPresent()) {
            List<String> clientAcceptedEncodings = Arrays.asList(acceptEncodingHeader.get().split(","));

            boolean gzipSupportedByClient = clientAcceptedEncodings.stream()
                .map(String::trim)
                .anyMatch(encoding -> supportedEncodings.contains(encoding.toLowerCase()));

            if (gzipSupportedByClient) {
                try {
                    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                    try (GZIPOutputStream gzipStream = new GZIPOutputStream(byteStream)) {
                        gzipStream.write(originalBody);
                    }
                    finalBody = byteStream.toByteArray();
                    response.addHeader("Content-Encoding", "gzip");
                    System.out.println(
                        STR."GZIP compression applied for \{request.getPath()}. Original size: \{originalBody.length}, Compressed size: \{finalBody.length}");
                } catch (IOException e) {
                    System.err.println(
                        STR."Error compressing response for \{request.getPath()} with GZIP. Sending uncompressed. Error: \{e.getMessage()}");
                    // Fallback to uncompressed body if compression fails
                    response.removeHeader("Content-Encoding");
                    finalBody = originalBody;
                }
            } else {
                System.out.println(
                    STR."Client for \{request.getPath()} does not support any of the server's supported encodings (\{String.join(", ",
                        supportedEncodings)}). Sending uncompressed.");
            }
        } else {
            System.out.println(STR."No compression applied for \{request.getPath()}. Either no body or no Accept-Encoding header.");
        }

        response.setBody(finalBody);

        return response;
    }
}